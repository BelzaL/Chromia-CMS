Chromia CMS 
It is a small CMS created for project Chromia.

It includes a few functions such as: 
	- Content control
	- Menu builder
	- Site sections management
	- Show the activity of authors in git repository
	- Monitoring changes on git repository and autobuild of binary files

Structure
==============================
This section contains a brief overview of the file and directory structure in this project.

	- backend/ 			- It's the main directory of backend scripts
	- backend/gitlog.py		- It's The script checks availability of changes in the remote 
					  (compare remote vs local with git pull) git repository and in case 
					  of changes detection loads the information about commits into the database table cms_gitlog. 
					  If it finds changes in git repositories, it will start  build_deb.sh.
 					  Also reads the latest generated version that is produced (number of the new version is last+1)					  
					  (This script should be launched from the cron with a convenient time interval for you)

	- backend/build_deb.sh 		- This script runs the build and package of binary files in .deb a packet.					 


	- chromia/ 			- It's the main directory of frontend scripts.
	- chromia/settings.py		- It's a principal configuration file of the django project.
	- chromia/urls.py		- Admin and main URL configuration file. 
	- chromia/web_urls.py		- CMS URL configuration file.
	
	- chromia/cms/admin.py		- It's the representation of a model in the admin interface.
	- chromia/cms/models.py		- It's the Django domain model object file.
	- chromia/cms/views.py		- It contains a single view, which is used to render the page shown when you visit the URL /web/*

	- static/			- It's the main directory of static files like templeates, css and images.
	- static/frontend/
	- static/frontend/base.html     - The main site's template.
	- static/frontend/page.html     - Auxiliary site's template (for blocks).
	- static/frontend/css/style.css - The main CSS file with design and styles of the site.
	
	- doc/ini_mysql_db.sql		- Database's Script creation for Mysql (with the demo data)
	- doc/sample_apache.conf	- Sample of Apache configuration with wsgi
	- doc/sample_django.wsgi 	- Sample of Django set for wsgi

	- LICENSE			- The LICENSE file

System requirements
==============================
	- The python with version 2.6
	- MySql =< 5
	- Cron
	- Http server like Apache (for Apache mod_python or mod_wsgi)
	
	Python extensions:
	
	- Django 1.2.4
	- MySQL-python =< 1.2.3
	- Markdown-python
	- Python-twitter =< 0.8.1
	- Simplegeo-python-oauth2 =< 1.3.128


Installation
==============================
1. Ubunut, Debian


* Python installation
# apt-get install python 2.6 python2.6-dev


******** MySql server and client ********
# apt-get install mysql5 libmysqlclient-dev


******** Apache and mod_wsgi ********
# apt-get install apache2
# apt-get install libapache2-mod-wsgi


******** Django installation ********
# wget -c http://www.djangoproject.com/download/1.2.4/tarball/
# tar -zxf Django-1.2.4.tar.gz
# cd Django-1.2.4
# python setup.py install


******** Python MySql ********
Please download the tarsal file from http://downloads.sourceforge.net/project/mysql-python/
# tar -zxf MySQL-python-1.2.3.tar.gz
# cd MySQL-python-1.2.3
# python setup.py install

******** Python MySql ********
# apt-get install markdown-python


******** Python simplegeo-python-oauth2 ********
# wget https://github.com/simplegeo/python-oauth2/tarball/master --no-check-certificate
# tar -zxf simplegeo-python-oauth2-debian-1.3.128-0-g4a64169.tar.gz
# cd simplegeo-python-oauth2-4a64169/
# python setup.py install


******** Python twitter (simplegeo-python-oauth2 is required for this extension) ********
# wget http://python-twitter.googlecode.com/files/python-twitter-0.8.1.tar.gz
# tar -zxf python-twitter-0.8.1.tar.gz
# cd python-twitter-0.8.1
# python setup.py build
# python setup.py install



2. Database setting
==============================

2.1 Creation of a new database
  * To create a new database it's necessary to enter into the console mysql (mysql -uproot -password

> CREATE DATABASE chromia DEFAULT CHARACTER SET utf8;

2.2 Tables loading and demo data

# mysql -uroot chromia < doc/ini_mysql_db.sql



3. Configuration
==============================

3.1 Frontend configuration (chromia/settings.py)

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql', # Mysql driver
        'NAME': 'chromia',                      # Database name 
        'USER': 'root',                         # Database user
        'PASSWORD': '',                  # Database password 
        'HOST': 'localhost',                      # Database host
        'PORT': '3306',                      # Database port
    }
}


BUGZILLA_LINK = 'https://bugzilla.libresoft.es/show_bug.cgi?id='  # Url of bugzilla  bug tracker (it is used in show authors activity)
TWITTER_USER="mswl"   						  # Twitter account
TWITTER_TWITS=5							  # Amount of tweets shown on the site 
TWITTER_CACHE=120						  # Time of savings of tweets in Django cache




3.2 Backend configuration (backend/gitlog.py)

# Config section

chromia_src_dir = "/Volumes/Data1/environment/chromia.org/chromia.repo/chromia/"  # Directory where git project repository is allocated (Input)
chromia_pub_dir = "/home/kg/builds/pub/"					  # Directory where the generated packages files are allocated (Output result)

db_host         ="localhost"							  # Database host
db_user         ="root"								  # Database user
db_pass         =""								  # Database password 
db_name         ="chromia"							  # Database name


3.3 Backend configuration (backend/build_deb.sh)

OUT_BUILD_DIR="/home/kg/builds/pub/"						# Directory where the generated packages files are allocated
BUILD_DIR="/home/kg/builds/$1/"							# Temporal directory where the packages are build
MAINTANER_EMAIL="kirill.gordeev@gmail.com"					# Email of the packages builder responsable



3.4 Cron configuration

# crontab -e
# launch check on changes each 50 minutes
*/50 * * * * cd /opt/chromia/chromiaweb/chromia/src/backend/; python gitlog.py


3.5 Apache and Wsgi configuration
Please review the sample configurations files

	 - doc/sample_apache.conf
	 - doc/sample_django.wsgi 

4 Run
==============================

Run python test Http server
# chromia/manage.py runserver

Open the URL http://127.0.0.1:8000/web/home/

Administration URL http://127.0.0.1:8000/chromia/admin/

Usename:  chromia
Password: chromia


It's works!


License
==============================

# Copyright (C) 2011 Kirill Gordeev <kirill.gordeev@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

